<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
    
        :root {
            --bg-color: #ffffff;
            --text-color: #000000;
            --chat-bg: #e0f7fa;
            --chat-text-color: #000000;
            --sender-bg: #4caf50;
            --sender-text-color: #ffffff;
            --receiver-bg: #2196f3;
            --receiver-text-color: #ffffff;
        }
    
        [data-theme="dark"] {
            --bg-color: #1a1a1a;
            --text-color: #ffffff;
            --chat-bg: #2a2a2a;
            --chat-text-color: #ffffff;
            --sender-bg: #66bb6a;
            --sender-text-color: #ffffff;
            --receiver-bg: #1565c0;
            --receiver-text-color: #ffffff;
        }
    
        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
    
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 20px;
            background-color: #4a90e2;
            color: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 10;
        }
    
        .heading {
            font-size: 1.5rem;
            font-weight: bold;
        }
    
        .toggle-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.5rem;
            color: #fff;
        }
    
        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: var(--bg-color);
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding-top: 50px;
        }
    
        .message {
            max-width: 60%;
            padding: 10px;
            border-radius: 10px;
            word-wrap: break-word;
            font-size: 1rem;
            position: relative;
        }
    
        .sent {
            align-self: flex-end;
            background-color: var(--sender-bg);
            color: var(--sender-text-color);
        }
    
        .received {
            align-self: flex-start;
            background-color: var(--receiver-bg);
            color: var(--receiver-text-color);
        }
    
        .input-container {
            display: flex;
            padding: 10px;
            background-color: var(--bg-color);
            border-top: 1px solid #ccc;
        }
    
        .input-container input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 20px;
            font-size: 1rem;
            outline: none;
        }
    
        .input-container button {
            margin-left: 10px;
            padding: 10px;
            background-color: #4caf50;
            color: #fff;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 1rem;
        }
    
        .input-container button:hover {
            background-color: #45a049;
        }
    
        .typing-notification {
            font-size: 0.9rem;
            color: gray;
            padding: 5px;
            position: fixed;
            top: 60px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: auto;
            max-width: 80%;
            z-index: 5;
            display: none;
        }
    
        /* Hover effect for the delete button */
        .message:hover .delete-btn {
            visibility: visible;
        }
    
        .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: transparent;
            border: none;
            color: #ff0000;
            font-size: 1.5rem;
            visibility: hidden; /* Initially hidden */
            cursor: pointer;
        }
    
        .delete-options {
            display: none;
            position: absolute;
            top: 30px;
            right: 5px;
            background: #ffffff;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 160px;
            z-index: 999;
        }
    
        .delete-options button {
            width: 100%;
            padding: 10px;
            border: none;
            background-color: #f5f5f5;
            cursor: pointer;
            border-radius: 8px;
            text-align: left;
        }
    
        .delete-options button:hover {
            background-color: #efefef;
        }
    
        .delete-options button.delete-for-me, 
        .delete-options button.delete-for-everyone {
            color: #ff0000; /* Red text for "Delete for Me" and "Delete for Everyone" */
        }
    
        .delete-options button.cancel {
            color: #28a745; /* Green text for "Cancel" */
        }
    
        /* Show the delete options */
        .message.show-options .delete-options {
            display: block;
        }
    
        .message.show-options .delete-btn {
            visibility: hidden;
        }
    </style>
    
</head>
<body>

    <div class="navbar">
        <div class="heading">Chat Room</div>
        <button class="toggle-btn" id="themeToggle" onclick="toggleTheme()">‚òÄÔ∏è</button>
    </div>

    <div class="chat-container" id="chatContainer">
        <% messages.forEach(message => { %>
            <div class="message <%= message.sender === username ? 'sent' : 'received' %>" id="message_<%= message._id %>">
                <%= message.sender === username ? '' : `<strong>${message.sender}:</strong>` %> <%= message.text %>

                <!-- Delete Icon (visible on hover) -->
                <button class="delete-btn" onclick="showDeleteOptions('<%= message._id %>')">
                    <i class="fas fa-trash-alt"></i>
                </button>

                <!-- Delete Options Dropdown -->
                <div class="delete-options">
                    <button class="delete-for-me" onclick="deleteForMe('<%= message._id %>')">Delete for Me</button>
                    <button class="delete-for-everyone" onclick="deleteForEveryone('<%= message._id %>')">Delete for Everyone</button>
                    <button class="cancel" onclick="cancelDelete('<%= message._id %>')">Cancel</button>
                </div>
            </div>
        <% }) %>
    </div>

    <div id="typingNotification" class="typing-notification">Someone is typing...</div>

    <div class="input-container">
        <input type="text" id="messageInput" placeholder="Type a message..." maxlength="200">
        <button onclick="sendMessage()">Send</button>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();  
        const currentUsername = "<%= username %>";  

        function toggleTheme() {
            const body = document.body;
            const toggleBtn = document.getElementById('themeToggle');
            if (body.getAttribute('data-theme') === 'dark') {
                body.removeAttribute('data-theme');
                toggleBtn.innerHTML = '‚òÄÔ∏è';
            } else {
                body.setAttribute('data-theme', 'dark');
                toggleBtn.innerHTML = 'üåô';
            }
        }

        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (message) {
                socket.emit('newMessage', { sender: currentUsername, text: message }); // Emit message to server
                displayMessage(currentUsername, message, true); // Display locally
                input.value = '';
            }
        }

        socket.on('messageBroadcast', (data) => {
            // Skip displaying the message if the sender is the current user
            if (data.sender !== currentUsername) {
                displayMessage(data.sender, data.text, false);
            }
        });

        socket.on('messageDeletedForMe', (data) => {
            if (data.username === currentUsername) {
                const messageElement = document.getElementById(`message_${data.messageId}`);
                if (messageElement) {
                    messageElement.style.display = 'none';
                }
            }
        });

        socket.on('messageDeletedForEveryone', (data) => {
            const messageElement = document.getElementById(`message_${data.messageId}`);
            if (messageElement) {
                messageElement.style.display = 'none';
            }
        });

        function displayMessage(sender, text, isSender) {
            const chatContainer = document.getElementById('chatContainer');
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', isSender ? 'sent' : 'received');
            messageElement.innerHTML = isSender ? text : `<strong>${sender}:</strong> ${text}`;
            chatContainer.appendChild(messageElement);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showDeleteOptions(messageId) {
            const messageElement = document.getElementById(`message_${messageId}`);
            if (messageElement) {
                messageElement.classList.add('show-options');
            }
        }

        function cancelDelete(messageId) {
            const messageElement = document.getElementById(`message_${messageId}`);
            if (messageElement) {
                messageElement.classList.remove('show-options');
            }
        }

        function deleteForMe(messageId) {
            const messageElement = document.getElementById(`message_${messageId}`);
            if (messageElement) {
                messageElement.style.display = 'none'; // Hide the message for the current user
            }
        }

        function deleteForEveryone(messageId) {
            const messageElement = document.getElementById(`message_${messageId}`);
            if (messageElement) {
                messageElement.style.display = 'none'; // Hide the message for everyone
            }
        }

        const messageInput = document.getElementById('messageInput');
        const typingNotification = document.getElementById('typingNotification');

        messageInput.addEventListener('input', () => {
            socket.emit('typing', { user: currentUsername });
        });

        socket.on('displayTyping', (data) => {
            typingNotification.style.display = 'block';
            typingNotification.innerHTML = `${data.user} is typing...`;
            setTimeout(() => {
                typingNotification.style.display = 'none';
            }, 1000);
        });

        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>
